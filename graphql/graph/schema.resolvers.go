package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"blog/contracttesting/db"
	"blog/contracttesting/graphql/graph/model"
	"blog/contracttesting/utils"
	"context"
	"fmt"
	"strconv"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, email string, password string) (*model.User, error) {
	//implementing the CreateUser resolver
	hashedPassword := utils.HashPassword(password)
	// Create a new user in the database
	user, err := db.CreateUser(username, email, hashedPassword)
	if err != nil {
		return nil, err
	}
	cretedUser := &model.User{
		ID:       user.ID,
		Username: user.Username,
		Email:    user.Email,
	}
	return cretedUser, nil
}

// CreateBlogPost is the resolver for the createBlogPost field.
func (r *mutationResolver) CreateBlogPost(ctx context.Context, userID string, title string, content string, subtitle string, image string, spotifyLink string, uploadedImageLink string) (*model.BlogPost, error) {
	//implementing the CreateBlogPost resolver
	userIDInt, err := strconv.Atoi(userID)
	if err != nil {
		return nil, err
	}
	blog, err := db.CreateBlogForUserID(userIDInt, title, content, subtitle, image, spotifyLink, uploadedImageLink)
	if err != nil {
		return nil, err
	}
	createdBlog := &model.BlogPost{
		ID:                strconv.Itoa(blog.ID),
		UserID:            strconv.Itoa(blog.UserID), // Convert int to string
		Title:             blog.Title,
		Content:           blog.Content,
		CreatedAt:         blog.CreatedAt,
		Subtitle:          blog.Subtitle,
		Image:             blog.Image,
		SpotifyLink:       blog.SpotifyLink,
		UploadedImageLink: blog.UploadedImageLink,
	}
	return createdBlog, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, userID string, blogID string, content string) (*model.Comment, error) {
	//implementing the CreateComment resolver
	userIDInt, err := strconv.Atoi(userID)
	if err != nil {
		return nil, err
	}
	blogIDInt, err := strconv.Atoi(blogID)
	if err != nil {
		return nil, err
	}
	comment, err := db.CreateCommentForBlogID(userIDInt, blogIDInt, content)
	if err != nil {
		return nil, err
	}
	createdComment := &model.Comment{
		ID:        strconv.Itoa(comment.ID),
		UserID:    strconv.Itoa(comment.UserID),
		BlogID:    strconv.Itoa(comment.BlogID),
		Content:   comment.Content,
		CreatedAt: comment.CreatedAt,
	}
	return createdComment, nil
}

// UpdateBlogPost is the resolver for the updateBlogPost field.
func (r *mutationResolver) UpdateBlogPost(ctx context.Context, userID string, blogID string, title *string, content *string, subtitle *string, image *string, spotifyLink *string, uploadedImageLink *string) (*model.BlogPost, error) {
	//implementing the UpdateBlogPost resolver

	// Convert userID and blogID to integers
	userIDInt, err := strconv.Atoi(userID)
	if err != nil {
		return nil, err
	}
	blogIDInt, err := strconv.Atoi(blogID)
	if err != nil {
		return nil, err
	}
	blog, err := db.UpdateBlogForUserID(userIDInt, blogIDInt, *title, *content, *subtitle, *image, *spotifyLink, *uploadedImageLink)
	if err != nil {
		return nil, err
	}
	updatedBlog := &model.BlogPost{
		ID:                strconv.Itoa(blog.ID),
		UserID:            strconv.Itoa(blog.UserID),
		Title:             blog.Title,
		Content:           blog.Content,
		CreatedAt:         blog.CreatedAt,
		Subtitle:          blog.Subtitle,
		Image:             blog.Image,
		SpotifyLink:       blog.SpotifyLink,
		UploadedImageLink: blog.UploadedImageLink,
	}
	return updatedBlog, nil
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, blogID string, commentID string, content *string) (*model.Comment, error) {
	//implementing the UpdateComment resolver
	blogIDInt, err := strconv.Atoi(blogID)
	if err != nil {
		return nil, err
	}
	commentIDInt, err := strconv.Atoi(commentID)
	if err != nil {
		return nil, err
	}
	comment, err := db.UpdateCommentForCommentId(blogIDInt, commentIDInt, *content)
	if err != nil {
		return nil, err
	}
	updatedComment := &model.Comment{
		ID:        strconv.Itoa(comment.ID),
		UserID:    strconv.Itoa(comment.UserID),
		BlogID:    strconv.Itoa(comment.BlogID),
		Content:   comment.Content,
		CreatedAt: comment.CreatedAt,
	}
	return updatedComment, nil
}

// DeleteBlogPost is the resolver for the deleteBlogPost field.
func (r *mutationResolver) DeleteBlogPost(ctx context.Context, blogID string) (*bool, error) {
	err := db.DeleteBlogForBlogID(blogID)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, commentID string) (*bool, error) {
	err := db.DeleteCommentByID(commentID)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	//implementing the Users resolver
	users, err := db.GetAllUsers()
	if err != nil {
		return nil, err
	}
	var usersList []*model.User
	for _, user := range users {
		usersList = append(usersList, &model.User{
			ID:       user.ID,
			Username: user.Username,
			Email:    user.Email,
		})
	}
	return usersList, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, userID string) (*model.User, error) {
	//implementing the User resolver
	idInt, err := strconv.Atoi(userID)
	if err != nil {
		return nil, err
	}
	user, err := db.GetUserByID(idInt)
	if err != nil {
		return nil, err
	}
	return &model.User{
		ID:       user.ID,
		Username: user.Username,
		Email:    user.Email,
	}, nil
}

// UserByUsername is the resolver for the userByUsername field.
func (r *queryResolver) UserByUsername(ctx context.Context, username string) (*model.User, error) {
	//implementing the UserByUsername resolver
	user, err := db.GetUserByUsername(username)
	if err != nil {
		return nil, err
	}
	return &model.User{
		ID:       user.ID,
		Username: user.Username,
		Email:    user.Email,
	}, nil
}

// UserByEmail is the resolver for the userByEmail field.
func (r *queryResolver) UserByEmail(ctx context.Context, email string) (*model.User, error) {
	//implementing the UserByEmail resolver
	user, err := db.GetUserByEmail(email)
	if err != nil {
		return nil, err
	}
	return &model.User{
		ID:       user.ID,
		Username: user.Username,
		Email:    user.Email,
	}, nil
}

// BlogPosts is the resolver for the blogPosts field.
func (r *queryResolver) BlogPosts(ctx context.Context) ([]*model.BlogPost, error) {
	//implementing the BlogPosts resolver
	blogs, err := db.GetAllBlogPosts()
	if err != nil {
		return nil, err
	}
	var blogsList []*model.BlogPost
	for _, blog := range blogs {
		blogsList = append(blogsList, &model.BlogPost{
			ID:                strconv.Itoa(blog.ID),
			UserID:            strconv.Itoa(blog.UserID),
			Title:             blog.Title,
			Content:           blog.Content,
			CreatedAt:         blog.CreatedAt,
			Subtitle:          blog.Subtitle,
			Image:             blog.Image,
			SpotifyLink:       blog.SpotifyLink,
			UploadedImageLink: blog.UploadedImageLink,
		})
	}
	return blogsList, nil
}

// BlogPost is the resolver for the blogPost field.
func (r *queryResolver) BlogPost(ctx context.Context, blogID string) (*model.BlogPost, error) {
	//implementing the BlogPost resolver

	blog, err := db.GetBlogForBlogID(blogID)
	if err != nil {
		return nil, err
	}
	return &model.BlogPost{
		ID:                strconv.Itoa(blog.ID),
		UserID:            strconv.Itoa(blog.UserID),
		Title:             blog.Title,
		Content:           blog.Content,
		CreatedAt:         blog.CreatedAt,
		Subtitle:          blog.Subtitle,
		Image:             blog.Image,
		SpotifyLink:       blog.SpotifyLink,
		UploadedImageLink: blog.UploadedImageLink,
	}, nil
}

// BlogPostsByUser is the resolver for the blogPostsByUser field.
func (r *queryResolver) BlogPostsByUser(ctx context.Context, userID string) ([]*model.BlogPost, error) {
	//implementing the BlogPostsByUser resolver
	userIDInt, err := strconv.Atoi(userID)
	if err != nil {
		return nil, err
	}
	blogs, err := db.GetBlogPostsByUserID(userIDInt)
	if err != nil {
		return nil, err
	}
	var blogsList []*model.BlogPost
	for _, blog := range blogs {
		blogsList = append(blogsList, &model.BlogPost{
			ID:                strconv.Itoa(blog.ID),
			UserID:            strconv.Itoa(blog.UserID),
			Title:             blog.Title,
			Content:           blog.Content,
			CreatedAt:         blog.CreatedAt,
			Subtitle:          blog.Subtitle,
			Image:             blog.Image,
			SpotifyLink:       blog.SpotifyLink,
			UploadedImageLink: blog.UploadedImageLink,
		})
	}
	return blogsList, nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, blogID string) ([]*model.Comment, error) {
	comments, err := db.GetCommentsByBlogID(blogID)
	if err != nil {
		return nil, err
	}
	var commentsList []*model.Comment
	for _, comment := range comments {
		commentsList = append(commentsList, &model.Comment{
			ID:        strconv.Itoa(comment.ID),
			UserID:    strconv.Itoa(comment.UserID),
			BlogID:    strconv.Itoa(comment.BlogID),
			Content:   comment.Content,
			CreatedAt: comment.CreatedAt,
		})
	}
	return commentsList, nil
}

// CommentsByUser is the resolver for the commentsByUser field.
func (r *queryResolver) CommentsByUser(ctx context.Context, userID string) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentsByUser - commentsByUser"))
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, commentID string) (*model.Comment, error) {
	//implementing the Comment resolver
	comment, err := db.GetCommentForCommentID(commentID)
	if err != nil {
		return nil, err
	}
	return &model.Comment{
		ID:        strconv.Itoa(comment.ID),
		UserID:    strconv.Itoa(comment.UserID),
		BlogID:    strconv.Itoa(comment.BlogID),
		Content:   comment.Content,
		CreatedAt: comment.CreatedAt,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
